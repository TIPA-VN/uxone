// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  username       String         @unique
  department     String?        // Local department (defaults to "Operations")
  centralDepartment String?     // Department from central API (emp_dept)
  departmentName String?
  role           String?
  hashedPassword String?        // Optional since we use central auth
  image          String?
  isActive       Boolean        @default(true) // User account status
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  notifications  Notification[]
  documents      Document[]     @relation("UserDocuments")
  projects       Project[]
  notes          Note[]
  ownedTasks     Task[]         @relation("TaskOwner")
  assignedTasks  Task[]         @relation("TaskAssignee")
  demands        Demand[]       @relation("UserDemands")
  createdTasks   Task[]         @relation("TaskCreator")
  comments       Comment[]      @relation("CommentAuthor")
  projectMembers ProjectMember[]

  // Helpdesk relations
  assignedTickets Ticket[]      @relation("TicketAssignee")
  createdTickets  Ticket[]      @relation("TicketCreator")
  ticketComments  TicketComment[] @relation("TicketCommentAuthor")
  ticketAttachments TicketAttachment[] @relation("TicketAttachmentUploader")
  taskAttachments TaskAttachment[] @relation("TaskAttachmentUploader")
  taskComments   TaskComment[]  @relation("TaskCommentAuthor")
  projectComments ProjectComment[] @relation("ProjectCommentAuthor")
  
  // Document template relations
  createdTemplates DocumentTemplate[] @relation("DocumentTemplateCreator")
  createdDocumentNumbers DocumentNumber[] @relation("DocumentNumberCreator")

  @@map("users")
}

// Helpdesk Ticket System
model Ticket {
  id              String           @id @default(cuid())
  ticketNumber    String           @unique // auto-generated (e.g., "HD-2024-001")
  title           String
  description     String
  
  // Helpdesk specific fields
  status          TicketStatus     @default(OPEN)
  priority        TicketPriority   @default(MEDIUM)
  category        TicketCategory   @default(SUPPORT)
  
  // Customer info
  customerId      String?
  customerEmail   String
  customerName    String
  
  // Assignment
  assignedToId    String?
  assignedTo      User?            @relation("TicketAssignee", fields: [assignedToId], references: [id])
  assignedTeam    String?
  
  // Integration fields
  relatedTasks    String[]         // Task IDs created from this ticket
  relatedProjectId String?
  
  // Tracking
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  resolvedAt      DateTime?
  closedAt        DateTime?
  firstResponseAt DateTime?
  
  // SLA tracking
  slaBreached     Boolean          @default(false)
  responseTime    Int?             // minutes
  resolutionTime  Int?             // minutes
  
  // Communication
  comments        TicketComment[]
  attachments     TicketAttachment[]
  tags            String[]
  
  // Creator
  createdById     String
  createdBy       User             @relation("TicketCreator", fields: [createdById], references: [id])

  @@map("tickets")
}

model TicketComment {
  id          String   @id @default(cuid())
  content     String
  authorId    String
  author      User     @relation("TicketCommentAuthor", fields: [authorId], references: [id])
  authorType  CommentAuthorType @default(AGENT)
  ticketId    String
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  isInternal  Boolean  @default(false) // internal notes vs customer-visible
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ticket_comments")
}

model TicketAttachment {
  id          String   @id @default(cuid())
  fileName    String
  filePath    String
  fileType    String
  fileSize    Int
  ticketId    String
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  uploadedById String
  uploadedBy  User     @relation("TicketAttachmentUploader", fields: [uploadedById], references: [id])
  createdAt   DateTime @default(now())

  @@map("ticket_attachments")
}

// Enums for Ticket System
enum TicketStatus {
  OPEN
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  BUG
  FEATURE_REQUEST
  SUPPORT
  TECHNICAL_ISSUE
  GENERAL
}

enum CommentAuthorType {
  AGENT
  CUSTOMER
  SYSTEM
}

// Keep existing models unchanged
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  link      String?  // Optional: link to related resource
  type      String?  // Optional: type of notification (info, warning, etc.)
  read      Boolean  @default(false)
  hidden    Boolean  @default(false) // User has hidden this notification
  createdAt DateTime @default(now())

  @@map("notifications")
}

model Document {
  id            String   @id @default(cuid())
  fileName      String
  filePath      String // local path or S3 key
  fileType      String // e.g. pdf, docx, dwg
  size          Int
  version       Int      @default(1)
  metadata      Json     // type, project, part, etc.
  annotations   Json?    // Store Fabric.js canvas data
  ownerId       String
  owner         User     @relation("UserDocuments", fields: [ownerId], references: [id])
  department    String?
  accessRoles   String[] // roles allowed to view/edit
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Versioning
  parentId      String?  // for version history (null for latest)
  parent        Document? @relation("DocumentVersion", fields: [parentId], references: [id])
  versions      Document[] @relation("DocumentVersion")
  // Workflow hooks (future)
  workflowState String?  // e.g. draft, review, approved
  workflowMeta  Json?
  projectId     String?
  project       Project? @relation(fields: [projectId], references: [id])

  @@map("documents")
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

model Project {
  id            String   @id @default(cuid())
  name          String
  description   String?
  status        ProjectStatus @default(PLANNING)
  startDate     DateTime @default(now())
  endDate       DateTime?
  budget        Float?
  ownerId       String
  owner         User     @relation(fields: [ownerId], references: [id])
  departments   String[]
  
  // Document template fields
  documentTemplate String? // LLNV, ECO, INSP, etc.
  documentNumber   String? // Auto-generated (e.g., TIPA-LLNV-250727-001)
  
  // Due dates and approval
  requestDate       DateTime? // Request date for the project
  departmentDueDates Json?    // JSON object for department-specific due dates
  approvalState     Json?     // JSON object for department approval states
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  tasks         Task[]
  documents     Document[]
  members       ProjectMember[]
  comments      ProjectComment[]
  notes         Note[] // Notes related to this project
  documentNumbers DocumentNumber[] @relation("ProjectDocuments")

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  role      String   @default("member") // owner, member, viewer
  joinedAt  DateTime @default(now())

  @@unique([projectId, userId])
  @@map("project_members")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  author    User     @relation("CommentAuthor", fields: [authorId], references: [id])
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Task {
  id              String       @id @default(cuid())
  title           String
  description     String?
  status          TaskStatus   @default(TODO)
  priority        TaskPriority @default(MEDIUM)
  
  // Project and assignment
  projectId       String?
  project         Project?     @relation(fields: [projectId], references: [id])
  assigneeId      String?
  assignee        User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  ownerId         String?
  owner           User?        @relation("TaskOwner", fields: [ownerId], references: [id])
  creatorId       String?
  creator         User?        @relation("TaskCreator", fields: [creatorId], references: [id])
  
  // Ticket integration
  sourceTicketId  String?      // tracks origin ticket
  ticketIntegration Json?       // stores TaskFromTicket data
  
  // Dates
  dueDate         DateTime?
  startDate       DateTime?
  completedAt     DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  dependencies    TaskDependency[] @relation("DependentTask")
  dependents      TaskDependency[] @relation("DependencyTask")
  attachments     TaskAttachment[]
  comments        TaskComment[]
  legacyComments  Comment[] // Legacy comments relation
  subtasks        Task[]        @relation("SubtaskParent")
  parentTaskId    String?
  parentTask      Task?         @relation("SubtaskParent", fields: [parentTaskId], references: [id])

  @@map("tasks")
}

model TaskDependency {
  id              String @id @default(cuid())
  dependentTaskId String
  dependentTask   Task   @relation("DependentTask", fields: [dependentTaskId], references: [id])
  dependencyTaskId String
  dependencyTask  Task   @relation("DependencyTask", fields: [dependencyTaskId], references: [id])
  createdAt       DateTime @default(now())

  @@unique([dependentTaskId, dependencyTaskId])
  @@map("task_dependencies")
}

model TaskAttachment {
  id          String   @id @default(cuid())
  fileName    String
  filePath    String
  fileType    String
  fileSize    Int
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedById String
  uploadedBy  User     @relation("TaskAttachmentUploader", fields: [uploadedById], references: [id])
  createdAt   DateTime @default(now())

  @@map("task_attachments")
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  author    User     @relation("TaskCommentAuthor", fields: [authorId], references: [id])
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("task_comments")
}

model ProjectComment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  author    User     @relation("ProjectCommentAuthor", fields: [authorId], references: [id])
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("project_comments")
}

// Document Template Management System
model DocumentTemplate {
  id              String   @id @default(cuid())
  templateName    String   // e.g., "Liên Lạc Nghiệp Vụ"
  templateCode    String   @unique // e.g., "LLNV"
  description     String?
  isActive        Boolean  @default(true)
  effectiveDate   DateTime @default(now())
  revisionNumber  Int      @default(1)
  currentSequence Int      @default(0) // For auto-generating document numbers
  prefix          String   // e.g., "TIPA-LLNV"
  year            Int      @default(2025)
  
  // Metadata
  createdById     String
  createdBy       User     @relation("DocumentTemplateCreator", fields: [createdById], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  generatedDocuments DocumentNumber[] @relation("TemplateDocuments")

  @@map("document_templates")
}

model DocumentNumber {
  id                String   @id @default(cuid())
  documentNumber    String   @unique // e.g., "TIPA-LLNV-2025-001"
  templateId        String
  template          DocumentTemplate @relation("TemplateDocuments", fields: [templateId], references: [id])
  projectId         String?  // Optional - if linked to a project
  project           Project? @relation("ProjectDocuments", fields: [projectId], references: [id])
  sequenceNumber    Int      // e.g., 1, 2, 3...
  year              Int      // e.g., 2025
  status            DocumentNumberStatus @default(ACTIVE)
  
  // Metadata
  createdById       String
  createdBy         User     @relation("DocumentNumberCreator", fields: [createdById], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("document_numbers")
}

enum DocumentNumberStatus {
  ACTIVE
  USED
  CANCELLED
  EXPIRED
}

// ========================================
// JDE 9.2 Integration Models
// ========================================

// JDE Item Master (F4101 equivalent)
model ItemMaster {
  id          String   @id @default(cuid())
  itemNumber  String   @unique // IMITM
  description String   // IMLITM
  itemType    String   // IMTYP
  unitOfMeasure String // IMUM
  leadTime    Int      // IMLT
  safetyStock Int      // IMSSQ
  minOrderQty Int      // IMMOQ
  maxOrderQty Int      // IMMXQ
  lotSize     Int      // IMLOTS
  costCenter  String   // IMCC
  planner     String   // IMPL
  buyer       String   // IMBUY
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  locations   ItemLocation[]
  purchaseOrders PurchaseOrderDetail[]
  receipts    ReceiptDetail[]
  mrpMessages MrpMessage[]
  demands     SalesOrderDetail[]

  @@map("item_master")
}

// JDE Item Location (F4102 equivalent)
model ItemLocation {
  id          String   @id @default(cuid())
  itemNumber  String   // IMITM
  branch      String   // IMBR
  location    String   // IMLOC
  quantityOnHand Int   // IMQOH
  quantityOnOrder Int  // IMQOO
  quantityCommitted Int // IMQC
  lastCountDate DateTime? // IMCDT
  lastCountQuantity Int? // IMCQ
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  item        ItemMaster @relation(fields: [itemNumber], references: [itemNumber])

  @@unique([itemNumber, branch, location])
  @@map("item_location")
}

// JDE Purchase Order Header (F4301 equivalent)
model PurchaseOrderHeader {
  id          String   @id @default(cuid())
  poNumber    String   @unique // PDDOCO
  supplierId  String   // PDAN8
  supplierName String  // PDALPH
  orderDate   DateTime // PDRQDC
  promiseDate DateTime? // PDPDDJ
  status      String   // PDSTS
  totalAmount Decimal  // PDTOA
  currency    String   // PDCNDJ
  buyer       String   // PDBUY
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  details     PurchaseOrderDetail[]

  @@map("purchase_order_header")
}

// JDE Purchase Order Detail (F4311 equivalent)
model PurchaseOrderDetail {
  id          String   @id @default(cuid())
  poNumber    String   // PDDOCO
  lineNumber  Int      // PDLINE
  itemNumber  String   // PDITM
  description String   // PDDSC1
  quantity    Int      // PDQTOR
  quantityReceived Int // PDRQTOR
  unitPrice   Decimal  // PDUPRC
  extendedPrice Decimal // PDEXRC
  promiseDate DateTime? // PDPDDJ
  status      String   // PDSTS
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  header      PurchaseOrderHeader @relation(fields: [poNumber], references: [poNumber])
  item        ItemMaster @relation(fields: [itemNumber], references: [itemNumber])
  receipts    ReceiptDetail[]

  @@unique([poNumber, lineNumber])
  @@map("purchase_order_detail")
}

// JDE Receipts Detail (F4312 equivalent)
model ReceiptDetail {
  id          String   @id @default(cuid())
  poNumber    String   // PDDOCO
  lineNumber  Int      // PDLINE
  itemNumber  String   // PDITM
  receiptNumber String // RCRORN
  receiptDate DateTime // RCRCDJ
  quantityReceived Int // RCQTOR
  unitCost    Decimal  // RCUPRC
  lotNumber   String?  // RCLOTN
  location    String   // RCLOCN
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  poDetail    PurchaseOrderDetail @relation(fields: [poNumber, lineNumber], references: [poNumber, lineNumber])
  item        ItemMaster @relation(fields: [itemNumber], references: [itemNumber])

  @@unique([receiptNumber, lineNumber])
  @@map("receipt_detail")
}

// JDE MRP Messages (F3411 equivalent)
model MrpMessage {
  id          String   @id @default(cuid())
  itemNumber  String   // MMITM
  messageType String   // MMMSG
  messageText String   // MMTEXT
  quantity    Int      // MMQTY
  date        DateTime // MMDATE
  priority    Int      // MMPRI
  status      String   // MMSTS
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  item        ItemMaster @relation(fields: [itemNumber], references: [itemNumber])

  @@map("mrp_message")
}

// JDE Sales Order Detail (F4211 equivalent)
model SalesOrderDetail {
  id          String   @id @default(cuid())
  orderNumber String   // SDDOCO
  lineNumber  Int      // SDLINE
  itemNumber  String   // SDITM
  customerId  String   // SDAN8
  quantity    Int      // SDQTOR
  quantityShipped Int  // SDSOQS
  unitPrice   Decimal  // SDUPRC
  promiseDate DateTime? // SDPDDJ
  status      String   // SDSTS
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  item        ItemMaster @relation(fields: [itemNumber], references: [itemNumber])

  @@unique([orderNumber, lineNumber])
  @@map("sales_order_detail")
}

// AI Analytics and Recommendations
model AiRecommendation {
  id          String   @id @default(cuid())
  itemNumber  String
  recommendationType String // 'purchase', 'inventory', 'supplier'
  title       String
  description String
  priority    String   // 'low', 'medium', 'high', 'critical'
  confidence  Float    // 0-1
  data        Json     // Additional recommendation data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ai_recommendation")
}

// Demand Forecast
model DemandForecast {
  id          String   @id @default(cuid())
  itemNumber  String
  forecastDate DateTime
  period      String   // 'monthly', 'weekly', 'daily'
  quantity    Int
  confidence  Float    // 0-1
  model       String   // 'lstm', 'arima', 'ensemble'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([itemNumber, forecastDate, period])
  @@map("demand_forecast")
}

// Risk Assessment
model RiskAssessment {
  id          String   @id @default(cuid())
  itemNumber  String
  riskType    String   // 'over_purchase', 'stockout', 'supplier'
  riskLevel   String   // 'low', 'medium', 'high', 'critical'
  probability Float    // 0-1
  impact      String   // 'low', 'medium', 'high'
  description String
  mitigation  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("risk_assessment")
}

// Data Sync Log
model DataSyncLog {
  id          String   @id @default(cuid())
  syncType    String   // 'inventory', 'purchase_orders', 'receipts', 'mrp'
  status      String   // 'success', 'failed', 'partial'
  recordsProcessed Int
  recordsFailed Int
  startTime   DateTime
  endTime     DateTime?
  errorMessage String?
  createdAt   DateTime @default(now())

  @@map("data_sync_log")
}

// Department Account Mapping
model DepartmentAccount {
  id            Int      @id @default(autoincrement())
  bu            String   // Business Unit (e.g., "LVM", "TRD")
  department    String   // Department name (e.g., "Manufacturing Engineering", "HRA")
  account       Int      // Account number (e.g., 1110, 5110)
  approvalRoute String?  // Approval route for the department (e.g., "MANAGER", "DIRECTOR", "VP")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([bu, department])  // Ensures unique combination of BU and department
  @@map("department_accounts")
}

// Expense Account Mapping
model ExpenseAccount {
  id            Int      @id @default(autoincrement())
  account       Int      // Account number (e.g., 64118, 64119)
  description   String   // Account description in Vietnamese
  glClass       String   // GL Class (e.g., "NS01", "NS02")
  businessName  String   // Business Name (e.g., "TRD", "HEV", "LVM")
  orderType     String   // Order Type (e.g., "OP", "OR", "O7", "HR", "O2", "LR")
  bu            Int      // Business Unit number (e.g., 3000, 1000, 5000)
  stockType     String   // Stock Type (e.g., "Non-Stock")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([account, businessName, orderType, bu]) // Ensures unique combination
  @@map("expense_accounts")
}

// Demand ID Sequence Tracking
model DemandSequence {
  id        Int      @id @default(autoincrement())
  date      String   // Date in YYYYMMDD format
  sequence  Int      @default(1) // Daily sequence number
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date])
  @@map("demand_sequences")
}

// Demand Management
model Demand {
  id                    String   @id // Custom ID format: LR-YYYYMMDD-XXX
  
  // BU and Department information
  bu                    String   // Business Unit (e.g., "LVM", "TRD")
  department            String   // Department name
  account               Int      // Account number from DepartmentAccount
  approvalRoute         String?  // Approval route from DepartmentAccount
  
  // Expense Account information
  expenseAccount        Int      // Account number from ExpenseAccount
  expenseDescription    String   // Description from ExpenseAccount
  expenseGLClass        String   // GL Class from ExpenseAccount
  expenseStockType      String   // Stock Type from ExpenseAccount
  expenseOrderType      String   // Order Type from ExpenseAccount
  
  justification         String   // Justification for the demand
  priorityLevel         String   // LOW, MEDIUM, HIGH, URGENT
  expectedDeliveryDate  DateTime // Expected delivery date
  departmentSpecific    Json?    // Department-specific fields as JSON
  attachments           String[] // Array of file attachment names
  status                String   @default("PENDING") // PENDING, APPROVED, REJECTED, IN_PROGRESS, COMPLETED
  submittedAt           DateTime @default(now())
  approvedAt            DateTime?
  completedAt           DateTime?
  
  // User and department information
  userId                String
  userDepartment        String
  
  // Relations
  user                  User     @relation("UserDemands", fields: [userId], references: [id], onDelete: Cascade)
  demandLines           DemandLine[] // Multiple demand lines
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("demands")
}

// Demand Line Items
model DemandLine {
  id                String   @id @default(cuid())
  demandId          String
  demand            Demand   @relation(fields: [demandId], references: [id], onDelete: Cascade)
  
  // Line item details
  itemDescription   String   // Description of the item/service
  quantity          Int      // Quantity requested
  estimatedCost     Float    // Estimated cost in VND
  unitOfMeasure     String?  // Unit of measure (EA, KG, L, etc.)
  specifications    String?  // Technical specifications
  supplierPreference String? // Preferred supplier
  
  // Line status
  status            String   @default("PENDING") // PENDING, APPROVED, REJECTED, IN_PROGRESS, COMPLETED
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("demand_lines")
}
