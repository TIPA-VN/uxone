generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("UXONE_DATABASE_URL")
}

model User {
  id                       String                    @id @default(cuid())
  username                 String                    @unique
  name                     String?
  hashedPassword           String?
  email                    String?                   @unique
  image                    String?
  department               String?
  departmentName           String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  role                     String?
  isActive                 Boolean                   @default(true)
  centralDepartment        String?
  emp_code                 String?                   @unique
  comments                 Comment[]                 @relation("CommentAuthor")
  demands                  Demand[]                  @relation("UserDemands")
  createdDocumentNumbers   DocumentNumber[]          @relation("DocumentNumberCreator")
  createdTemplates         DocumentTemplate[]        @relation("DocumentTemplateCreator")
  documents                Document[]                @relation("UserDocuments")
  notes                    Note[]
  notifications            Notification[]
  projectComments          ProjectComment[]          @relation("ProjectCommentAuthor")
  projectMembers           ProjectMember[]
  projects                 Project[]
  serviceApprovalDecisions ServiceApprovalDecision[]
  taskAttachments          TaskAttachment[]          @relation("TaskAttachmentUploader")
  taskComments             TaskComment[]             @relation("TaskCommentAuthor")
  assignedTasks            Task[]                    @relation("TaskAssignee")
  createdTasks             Task[]                    @relation("TaskCreator")
  ownedTasks               Task[]                    @relation("TaskOwner")
  ticketAttachments        TicketAttachment[]        @relation("TicketAttachmentUploader")
  ticketComments           TicketComment[]           @relation("TicketCommentAuthor")
  assignedTickets          Ticket[]                  @relation("TicketAssignee")
  createdTickets           Ticket[]                  @relation("TicketCreator")
  triggeredEvents          WebhookEvent[]

  @@map("users")
}

model Ticket {
  id               String             @id @default(cuid())
  ticketNumber     String             @unique
  title            String
  description      String
  status           TicketStatus       @default(OPEN)
  priority         TicketPriority     @default(MEDIUM)
  category         TicketCategory     @default(SUPPORT)
  customerId       String?
  customerEmail    String
  customerName     String
  assignedToId     String?
  assignedTeam     String?
  relatedTasks     String[]
  relatedProjectId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  resolvedAt       DateTime?
  closedAt         DateTime?
  firstResponseAt  DateTime?
  slaBreached      Boolean            @default(false)
  responseTime     Int?
  resolutionTime   Int?
  tags             String[]
  createdById      String
  attachments      TicketAttachment[]
  comments         TicketComment[]
  assignedTo       User?              @relation("TicketAssignee", fields: [assignedToId], references: [id])
  createdBy        User               @relation("TicketCreator", fields: [createdById], references: [id])

  @@map("tickets")
}

model TicketComment {
  id         String            @id @default(cuid())
  content    String
  authorId   String
  authorType CommentAuthorType @default(AGENT)
  ticketId   String
  isInternal Boolean           @default(false)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  author     User              @relation("TicketCommentAuthor", fields: [authorId], references: [id])
  ticket     Ticket            @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_comments")
}

model TicketAttachment {
  id           String   @id @default(cuid())
  fileName     String
  filePath     String
  fileType     String
  fileSize     Int
  ticketId     String
  uploadedById String
  createdAt    DateTime @default(now())
  ticket       Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  uploadedBy   User     @relation("TicketAttachmentUploader", fields: [uploadedById], references: [id])

  @@map("ticket_attachments")
}

model Notification {
  id                  String               @id @default(cuid())
  userId              String
  title               String
  message             String
  link                String?
  type                String?
  read                Boolean              @default(false)
  createdAt           DateTime             @default(now())
  hidden              Boolean              @default(false)
  user                User                 @relation(fields: [userId], references: [id])
  serviceNotification ServiceNotification?

  @@map("notifications")
}

model Document {
  id            String     @id @default(cuid())
  fileName      String
  filePath      String
  fileType      String
  size          Int
  version       Int        @default(1)
  metadata      Json
  ownerId       String
  department    String?
  accessRoles   String[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  parentId      String?
  workflowState String?
  workflowMeta  Json?
  projectId     String?
  annotations   Json?
  owner         User       @relation("UserDocuments", fields: [ownerId], references: [id])
  parent        Document?  @relation("DocumentVersion", fields: [parentId], references: [id])
  versions      Document[] @relation("DocumentVersion")
  project       Project?   @relation(fields: [projectId], references: [id])

  @@map("documents")
}

model Project {
  id                 String           @id @default(cuid())
  name               String
  description        String?
  ownerId            String
  departments        String[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  status             ProjectStatus    @default(PLANNING)
  budget             Float?
  endDate            DateTime?
  startDate          DateTime         @default(now())
  documentNumber     String?
  documentTemplate   String?
  approvalState      Json?
  departmentDueDates Json?
  requestDate        DateTime?
  documentNumbers    DocumentNumber[] @relation("ProjectDocuments")
  documents          Document[]
  notes              Note[]
  comments           ProjectComment[]
  members            ProjectMember[]
  owner              User             @relation(fields: [ownerId], references: [id])
  tasks              Task[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String   @default("member")
  joinedAt  DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
  @@map("project_members")
}

model Note {
  id        String   @id @default(cuid())
  projectId String?
  content   String
  createdAt DateTime @default(now())
  title     String
  updatedAt DateTime @updatedAt
  userId    String
  project   Project? @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("notes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  taskId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation("CommentAuthor", fields: [authorId], references: [id])
  task      Task?    @relation(fields: [taskId], references: [id])

  @@map("comments")
}

model Task {
  id                String           @id @default(cuid())
  title             String
  description       String?
  ownerId           String?
  assigneeId        String?
  status            TaskStatus       @default(TODO)
  priority          TaskPriority     @default(MEDIUM)
  dueDate           DateTime?
  projectId         String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  parentTaskId      String?
  completedAt       DateTime?
  creatorId         String?
  sourceTicketId    String?
  startDate         DateTime?
  ticketIntegration Json?
  legacyComments    Comment[]
  serviceTask       ServiceTask?
  attachments       TaskAttachment[]
  comments          TaskComment[]
  dependents        TaskDependency[] @relation("DependencyTask")
  dependencies      TaskDependency[] @relation("DependentTask")
  assignee          User?            @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator           User?            @relation("TaskCreator", fields: [creatorId], references: [id])
  owner             User?            @relation("TaskOwner", fields: [ownerId], references: [id])
  parentTask        Task?            @relation("SubtaskParent", fields: [parentTaskId], references: [id])
  subtasks          Task[]           @relation("SubtaskParent")
  project           Project?         @relation(fields: [projectId], references: [id])

  @@map("tasks")
}

model TaskDependency {
  id               String   @id @default(cuid())
  dependentTaskId  String
  createdAt        DateTime @default(now())
  dependencyTaskId String
  dependencyTask   Task     @relation("DependencyTask", fields: [dependencyTaskId], references: [id])
  dependentTask    Task     @relation("DependentTask", fields: [dependentTaskId], references: [id])

  @@unique([dependentTaskId, dependencyTaskId])
  @@map("task_dependencies")
}

model TaskAttachment {
  id           String   @id @default(cuid())
  taskId       String
  fileName     String
  filePath     String
  fileType     String
  createdAt    DateTime @default(now())
  fileSize     Int
  uploadedById String
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedBy   User     @relation("TaskAttachmentUploader", fields: [uploadedById], references: [id])

  @@map("task_attachments")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation("TaskCommentAuthor", fields: [authorId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_comments")
}

model ProjectComment {
  id        String   @id @default(cuid())
  projectId String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation("ProjectCommentAuthor", fields: [authorId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_comments")
}

model DocumentTemplate {
  id                 String           @id @default(cuid())
  templateName       String
  templateCode       String           @unique
  description        String?
  isActive           Boolean          @default(true)
  effectiveDate      DateTime         @default(now())
  revisionNumber     Int              @default(1)
  currentSequence    Int              @default(0)
  prefix             String
  year               Int              @default(2025)
  createdById        String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  generatedDocuments DocumentNumber[] @relation("TemplateDocuments")
  createdBy          User             @relation("DocumentTemplateCreator", fields: [createdById], references: [id])

  @@map("document_templates")
}

model DocumentNumber {
  id             String               @id @default(cuid())
  documentNumber String               @unique
  templateId     String
  projectId      String?
  sequenceNumber Int
  year           Int
  status         DocumentNumberStatus @default(ACTIVE)
  createdById    String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  createdBy      User                 @relation("DocumentNumberCreator", fields: [createdById], references: [id])
  project        Project?             @relation("ProjectDocuments", fields: [projectId], references: [id])
  template       DocumentTemplate     @relation("TemplateDocuments", fields: [templateId], references: [id])

  @@map("document_numbers")
}

model ItemMaster {
  id             String                @id @default(cuid())
  itemNumber     String                @unique
  description    String
  itemType       String
  unitOfMeasure  String
  leadTime       Int
  safetyStock    Int
  minOrderQty    Int
  maxOrderQty    Int
  lotSize        Int
  costCenter     String
  planner        String
  buyer          String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  locations      ItemLocation[]
  mrpMessages    MrpMessage[]
  purchaseOrders PurchaseOrderDetail[]
  receipts       ReceiptDetail[]
  demands        SalesOrderDetail[]

  @@map("item_master")
}

model ItemLocation {
  id                String     @id @default(cuid())
  itemNumber        String
  branch            String
  location          String
  quantityOnHand    Int
  quantityOnOrder   Int
  quantityCommitted Int
  lastCountDate     DateTime?
  lastCountQuantity Int?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  item              ItemMaster @relation(fields: [itemNumber], references: [itemNumber])

  @@unique([itemNumber, branch, location])
  @@map("item_location")
}

model PurchaseOrderHeader {
  id           String                @id @default(cuid())
  poNumber     String                @unique
  supplierId   String
  supplierName String
  orderDate    DateTime
  promiseDate  DateTime?
  status       String
  totalAmount  Decimal
  currency     String
  buyer        String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  details      PurchaseOrderDetail[]

  @@map("purchase_order_header")
}

model PurchaseOrderDetail {
  id               String              @id @default(cuid())
  poNumber         String
  lineNumber       Int
  itemNumber       String
  description      String
  quantity         Int
  quantityReceived Int
  unitPrice        Decimal
  extendedPrice    Decimal
  promiseDate      DateTime?
  status           String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  item             ItemMaster          @relation(fields: [itemNumber], references: [itemNumber])
  header           PurchaseOrderHeader @relation(fields: [poNumber], references: [poNumber])
  receipts         ReceiptDetail[]

  @@unique([poNumber, lineNumber])
  @@map("purchase_order_detail")
}

model ReceiptDetail {
  id               String              @id @default(cuid())
  poNumber         String
  lineNumber       Int
  itemNumber       String
  receiptNumber    String
  receiptDate      DateTime
  quantityReceived Int
  unitCost         Decimal
  lotNumber        String?
  location         String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  item             ItemMaster          @relation(fields: [itemNumber], references: [itemNumber])
  poDetail         PurchaseOrderDetail @relation(fields: [poNumber, lineNumber], references: [poNumber, lineNumber])

  @@unique([receiptNumber, lineNumber])
  @@map("receipt_detail")
}

model MrpMessage {
  id          String     @id @default(cuid())
  itemNumber  String
  messageType String
  messageText String
  quantity    Int
  date        DateTime
  priority    Int
  status      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  item        ItemMaster @relation(fields: [itemNumber], references: [itemNumber])

  @@map("mrp_message")
}

model SalesOrderDetail {
  id              String     @id @default(cuid())
  orderNumber     String
  lineNumber      Int
  itemNumber      String
  customerId      String
  quantity        Int
  quantityShipped Int
  unitPrice       Decimal
  promiseDate     DateTime?
  status          String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  item            ItemMaster @relation(fields: [itemNumber], references: [itemNumber])

  @@unique([orderNumber, lineNumber])
  @@map("sales_order_detail")
}

model AiRecommendation {
  id                 String   @id @default(cuid())
  itemNumber         String
  recommendationType String
  title              String
  description        String
  priority           String
  confidence         Float
  data               Json
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("ai_recommendation")
}

model DemandForecast {
  id           String   @id @default(cuid())
  itemNumber   String
  forecastDate DateTime
  period       String
  quantity     Int
  confidence   Float
  model        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([itemNumber, forecastDate, period])
  @@map("demand_forecast")
}

model RiskAssessment {
  id          String   @id @default(cuid())
  itemNumber  String
  riskType    String
  riskLevel   String
  probability Float
  impact      String
  description String
  mitigation  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("risk_assessment")
}

model DataSyncLog {
  id               String    @id @default(cuid())
  syncType         String
  status           String
  recordsProcessed Int
  recordsFailed    Int
  startTime        DateTime
  endTime          DateTime?
  errorMessage     String?
  createdAt        DateTime  @default(now())

  @@map("data_sync_log")
}

model DepartmentAccount {
  id            Int      @id @default(autoincrement())
  bu            String
  department    String
  account       Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  approvalRoute String?

  @@unique([bu, department])
  @@map("department_accounts")
}

model ExpenseAccount {
  id           Int      @id @default(autoincrement())
  account      Int
  description  String
  glClass      String
  businessName String
  orderType    String
  bu           Int
  stockType    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([account, businessName, orderType, bu])
  @@map("expense_accounts")
}

model DemandSequence {
  id        Int      @id @default(autoincrement())
  date      String   @unique
  sequence  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("demand_sequences")
}

model Demand {
  id                   String       @id
  justification        String
  priorityLevel        String
  expectedDeliveryDate DateTime
  departmentSpecific   Json?
  attachments          String[]
  status               String       @default("PENDING")
  submittedAt          DateTime     @default(now())
  approvedAt           DateTime?
  completedAt          DateTime?
  userId               String
  userDepartment       String
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  account              Int
  approvalRoute        String?
  bu                   String
  department           String
  expenseAccount       Int
  expenseDescription   String
  expenseGLClass       String
  expenseOrderType     String
  expenseStockType     String
  demandLines          DemandLine[]
  user                 User         @relation("UserDemands", fields: [userId], references: [id], onDelete: Cascade)

  @@map("demands")
}

model DemandLine {
  id                 String   @id @default(cuid())
  demandId           String
  itemDescription    String
  quantity           Int
  estimatedCost      Float
  unitOfMeasure      String?
  specifications     String?
  supplierPreference String?
  status             String   @default("PENDING")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  demand             Demand   @relation(fields: [demandId], references: [id], onDelete: Cascade)

  @@map("demand_lines")
}

model ServiceApp {
  id            String                @id @default(cuid())
  name          String
  serviceKey    String                @unique
  permissions   String[]
  isActive      Boolean               @default(true)
  rateLimit     Int                   @default(100)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  approvals     ServiceApproval[]
  notifications ServiceNotification[]
  tasks         ServiceTask[]
  webhooks      ServiceWebhook[]
  events        WebhookEvent[]

  @@map("service_apps")
}

model ServiceTask {
  id                String     @id @default(cuid())
  taskId            String     @unique
  serviceId         String
  serviceType       String
  externalReference String?
  metadata          Json?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  service           ServiceApp @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  task              Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("service_tasks")
}

model ServiceNotification {
  id             String       @id @default(cuid())
  notificationId String       @unique
  serviceId      String
  serviceType    String
  priority       String       @default("NORMAL")
  expiresAt      DateTime?
  createdAt      DateTime     @default(now())
  metadata       Json?
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  service        ServiceApp   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId, serviceType])
  @@index([notificationId])
  @@map("service_notifications")
}

model ServiceApproval {
  id           String                    @id @default(cuid())
  serviceId    String
  status       String                    @default("PENDING")
  priority     String                    @default("NORMAL")
  dueDate      DateTime?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  approvalType String
  approvers    Json
  currentLevel Int                       @default(1)
  description  String?
  externalId   String?
  metadata     Json?
  serviceType  String
  title        String
  totalLevels  Int                       @default(1)
  urgency      String                    @default("NORMAL")
  decisions    ServiceApprovalDecision[]
  service      ServiceApp                @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  events       WebhookEvent[]

  @@index([serviceId, serviceType])
  @@index([status, priority])
  @@index([externalId])
  @@map("service_approvals")
}

model ServiceApprovalDecision {
  id           String          @id @default(cuid())
  approvalId   String
  approverId   String
  level        Int
  decision     String
  comments     String?
  decisionDate DateTime        @default(now())
  approval     ServiceApproval @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  approver     User            @relation(fields: [approverId], references: [id])

  @@unique([approvalId, approverId, level])
  @@index([approvalId])
  @@index([approverId])
  @@map("service_approval_decisions")
}

model ServiceWebhook {
  id         String            @id @default(cuid())
  serviceId  String
  name       String
  url        String
  events     String[]
  secret     String
  isActive   Boolean           @default(true)
  retryCount Int               @default(3)
  timeout    Int               @default(30)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  service    ServiceApp        @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  deliveries WebhookDelivery[]

  @@index([serviceId])
  @@index([isActive])
  @@map("service_webhooks")
}

model WebhookEvent {
  id            String            @id @default(cuid())
  eventType     String
  serviceId     String
  approvalId    String?
  triggeredById String?
  payload       Json
  createdAt     DateTime          @default(now())
  deliveries    WebhookDelivery[]
  approval      ServiceApproval?  @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  service       ServiceApp        @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  triggeredBy   User?             @relation(fields: [triggeredById], references: [id])

  @@index([serviceId, eventType])
  @@index([createdAt])
  @@map("webhook_events")
}

model WebhookDelivery {
  id           String         @id @default(cuid())
  webhookId    String
  eventId      String
  status       String
  responseCode Int?
  responseBody String?
  attemptCount Int            @default(0)
  nextRetryAt  DateTime?
  deliveredAt  DateTime?
  createdAt    DateTime       @default(now())
  event        WebhookEvent   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  webhook      ServiceWebhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId, status])
  @@index([nextRetryAt])
  @@map("webhook_deliveries")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  BUG
  FEATURE_REQUEST
  SUPPORT
  TECHNICAL_ISSUE
  GENERAL
}

enum CommentAuthorType {
  AGENT
  CUSTOMER
  SYSTEM
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DocumentNumberStatus {
  ACTIVE
  USED
  CANCELLED
  EXPIRED
}
