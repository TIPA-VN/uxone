// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  username       String         @unique
  department     String?
  departmentName String?
  role           String?
  hashedPassword String?        // Optional since we use central auth
  image          String?
  isActive       Boolean        @default(true) // User account status
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  notifications  Notification[]
  documents      Document[]     @relation("UserDocuments")
  projects       Project[]
  notes          Note[]
  ownedTasks     Task[]         @relation("TaskOwner")
  assignedTasks  Task[]         @relation("TaskAssignee")
  createdTasks   Task[]         @relation("TaskCreator")
  comments       Comment[]      @relation("CommentAuthor")
  projectMembers ProjectMember[]

  @@map("users")
}

// Keep existing models unchanged
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  link      String?  // Optional: link to related resource
  type      String?  // Optional: type of notification (info, warning, etc.)
  read      Boolean  @default(false)
  hidden    Boolean  @default(false) // User has hidden this notification
  createdAt DateTime @default(now())

  @@map("notifications")
}

model Document {
  id            String   @id @default(cuid())
  fileName      String
  filePath      String // local path or S3 key
  fileType      String // e.g. pdf, docx, dwg
  size          Int
  version       Int      @default(1)
  metadata      Json     // type, project, part, etc.
  annotations   Json?    // Store Fabric.js canvas data
  ownerId       String
  owner         User     @relation("UserDocuments", fields: [ownerId], references: [id])
  department    String?
  accessRoles   String[] // roles allowed to view/edit
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Versioning
  parentId      String?  // for version history (null for latest)
  parent        Document? @relation("DocumentVersion", fields: [parentId], references: [id])
  versions      Document[] @relation("DocumentVersion")
  // Workflow hooks (future)
  workflowState String?  // e.g. draft, review, approved
  workflowMeta  Json?
  projectId     String?
  project       Project? @relation(fields: [projectId], references: [id])

  @@map("documents")
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

model Project {
  id            String   @id @default(cuid())
  name          String
  description   String?
  status        ProjectStatus @default(PLANNING)
  startDate     DateTime @default(now())
  endDate       DateTime?
  budget        Float?
  ownerId       String
  owner         User     @relation(fields: [ownerId], references: [id])
  departments   String[] // departments requiring approval
  approvalState Json     // { department: status, ... }
  released      Boolean  @default(false)
  releasedAt    DateTime?
  requestDate   DateTime? // Overall project due date
  departmentDueDates Json? // { department: dueDate, ... }
  tags          String[] // Project tags for categorization
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  documents     Document[]
  notes         Note[]
  comments      Comment[]      @relation("ProjectComments")
  legacyComments ProjectComment[]
  tasks         Task[]
  members       ProjectMember[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String   // 'owner', 'member', 'viewer'
  joinedAt  DateTime @default(now())

  @@unique([projectId, userId])
  @@map("project_members")
}

model Note {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  department  String
  content     String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  authorName  String
  createdAt   DateTime @default(now())

  @@map("notes")
}

// Unified Comment System
model Comment {
  id              String    @id @default(cuid())
  content         String
  authorId        String
  author          User      @relation("CommentAuthor", fields: [authorId], references: [id])
  taskId          String?   // Optional: link to task
  task            Task?     @relation("TaskComments", fields: [taskId], references: [id], onDelete: Cascade)
  projectId       String?   // Optional: link to project
  project         Project?  @relation("ProjectComments", fields: [projectId], references: [id], onDelete: Cascade)
  parentCommentId String?   // For threaded comments
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  mentions        String[]  // Array of user IDs mentioned
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("comments")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Task {
  id              String       @id @default(cuid())
  title           String
  description     String?
  status          TaskStatus   @default(TODO)
  priority        TaskPriority @default(MEDIUM)
  projectId       String?      // Optional: link to project
  project         Project?     @relation(fields: [projectId], references: [id])
  parentTaskId    String?      // For subtasks
  parentTask      Task?        @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  subtasks        Task[]       @relation("TaskHierarchy")
  assigneeId      String?      // Individual assignee
  assignee        User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy       String       // Task creator
  creator         User         @relation("TaskCreator", fields: [createdBy], references: [id])
  ownerId         String       // Task owner (can be different from creator)
  owner           User         @relation("TaskOwner", fields: [ownerId], references: [id])
  assignedDepartments String[] // Departments assigned to this task
  dueDate         DateTime?
  estimatedHours  Float?
  actualHours     Float?
  tags            String[]     // Task tags for categorization
  dependencies    TaskDependency[] @relation("DependentTask")
  blockingTasks   TaskDependency[] @relation("BlockingTask")
  attachments     TaskAttachment[]
  comments        Comment[]    @relation("TaskComments")
  legacyComments  TaskComment[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("tasks")
}

// Task Dependencies for blocking relationships
model TaskDependency {
  id              String   @id @default(cuid())
  dependentTaskId String   // Task that depends on another
  dependentTask   Task     @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  blockingTaskId  String   // Task that blocks the dependent task
  blockingTask    Task     @relation("BlockingTask", fields: [blockingTaskId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())

  @@unique([dependentTaskId, blockingTaskId])
  @@map("task_dependencies")
}

model TaskAttachment {
  id          String   @id @default(cuid())
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  fileName    String
  filePath    String
  fileType    String
  size        Int
  uploadedBy  String
  uploadedAt  DateTime @default(now())

  @@map("task_attachments")
}

// Legacy models for backward compatibility
model ProjectComment {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  text      String
  type      String   // 'comment' or 'update'
  authorId  String
  author    String   // Store author name for display
  timestamp DateTime @default(now())

  @@map("project_comments")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  text      String
  authorId  String
  author    String   // Store author name for display
  timestamp DateTime @default(now())

  @@map("task_comments")
}
