// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  engineType      = "binary"
}

model User {
  id             String   @id @default(cuid())
  username       String   @unique // Employee code from central API
  role           String   @default("USER")
  name           String?
  hashedPassword String
  email          String   @unique
  image          String?
  department     String? // emp_dept from central API
  departmentName String? // emp_dept_name from central API
  position       String? // emp_pos from central API
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  notifications  Notification[]
  documents      Document[] @relation("UserDocuments")
  projects       Project[]

  @@map("users")
}

model SOPeriodBacklog {
  id           String   @id @default(cuid())
  week         String // e.g. "2024-W23"
  customerId   String
  customerName String
  business     String
  backlogs     Float
  inDock       Float
  inProgress   Float
  recordedAt   DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  read      Boolean  @default(false)
  link      String?  // Optional: link to related resource
  type      String?  // Optional: type of notification (info, warning, etc.)
  createdAt DateTime @default(now())
}

model Document {
  id            String   @id @default(cuid())
  fileName      String
  filePath      String // local path or S3 key
  fileType      String // e.g. pdf, docx, dwg
  size          Int
  version       Int      @default(1)
  metadata      Json     // type, project, part, etc.
  ownerId       String
  owner         User     @relation("UserDocuments", fields: [ownerId], references: [id])
  department    String?
  accessRoles   String[] // roles allowed to view/edit
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Versioning
  parentId      String?  // for version history (null for latest)
  parent        Document? @relation("DocumentVersion", fields: [parentId], references: [id])
  versions      Document[] @relation("DocumentVersion")
  // Workflow hooks (future)
  workflowState String?  // e.g. draft, review, approved
  workflowMeta  Json?
  projectId     String?
  project       Project? @relation(fields: [projectId], references: [id])
}

model Project {
  id            String   @id @default(cuid())
  name          String
  description   String?
  ownerId       String
  owner         User     @relation(fields: [ownerId], references: [id])
  departments   String[] // departments requiring approval
  approvalState Json     // { department: status, ... }
  status        String   @default("started") // started, pending, approved, released
  released      Boolean  @default(false)
  releasedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Optional: link to documents
  documents     Document[]
}
