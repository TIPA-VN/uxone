// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  username       String         @unique
  department     String?
  departmentName String?
  role           String?
  hashedPassword String?        // Optional since we use central auth
  image          String?
  isActive       Boolean        @default(true) // User account status
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  notifications  Notification[]
  documents      Document[]     @relation("UserDocuments")
  projects       Project[]
  notes          Note[]
  ownedTasks     Task[]         @relation("TaskOwner")
  assignedTasks  Task[]         @relation("TaskAssignee")
  createdTasks   Task[]         @relation("TaskCreator")
  comments       Comment[]      @relation("CommentAuthor")
  projectMembers ProjectMember[]

  // Helpdesk relations
  assignedTickets Ticket[]      @relation("TicketAssignee")
  createdTickets  Ticket[]      @relation("TicketCreator")
  ticketComments  TicketComment[] @relation("TicketCommentAuthor")
  ticketAttachments TicketAttachment[] @relation("TicketAttachmentUploader")
  taskAttachments TaskAttachment[] @relation("TaskAttachmentUploader")
  taskComments   TaskComment[]  @relation("TaskCommentAuthor")
  projectComments ProjectComment[] @relation("ProjectCommentAuthor")

  @@map("users")
}

// Helpdesk Ticket System
model Ticket {
  id              String           @id @default(cuid())
  ticketNumber    String           @unique // auto-generated (e.g., "HD-2024-001")
  title           String
  description     String
  
  // Helpdesk specific fields
  status          TicketStatus     @default(OPEN)
  priority        TicketPriority   @default(MEDIUM)
  category        TicketCategory   @default(SUPPORT)
  
  // Customer info
  customerId      String?
  customerEmail   String
  customerName    String
  
  // Assignment
  assignedToId    String?
  assignedTo      User?            @relation("TicketAssignee", fields: [assignedToId], references: [id])
  assignedTeam    String?
  
  // Integration fields
  relatedTasks    String[]         // Task IDs created from this ticket
  relatedProjectId String?
  
  // Tracking
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  resolvedAt      DateTime?
  closedAt        DateTime?
  firstResponseAt DateTime?
  
  // SLA tracking
  slaBreached     Boolean          @default(false)
  responseTime    Int?             // minutes
  resolutionTime  Int?             // minutes
  
  // Communication
  comments        TicketComment[]
  attachments     TicketAttachment[]
  tags            String[]
  
  // Creator
  createdById     String
  createdBy       User             @relation("TicketCreator", fields: [createdById], references: [id])

  @@map("tickets")
}

model TicketComment {
  id          String   @id @default(cuid())
  content     String
  authorId    String
  author      User     @relation("TicketCommentAuthor", fields: [authorId], references: [id])
  authorType  CommentAuthorType @default(AGENT)
  ticketId    String
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  isInternal  Boolean  @default(false) // internal notes vs customer-visible
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ticket_comments")
}

model TicketAttachment {
  id          String   @id @default(cuid())
  fileName    String
  filePath    String
  fileType    String
  fileSize    Int
  ticketId    String
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  uploadedById String
  uploadedBy  User     @relation("TicketAttachmentUploader", fields: [uploadedById], references: [id])
  createdAt   DateTime @default(now())

  @@map("ticket_attachments")
}

// Enums for Ticket System
enum TicketStatus {
  OPEN
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  BUG
  FEATURE_REQUEST
  SUPPORT
  TECHNICAL_ISSUE
  GENERAL
}

enum CommentAuthorType {
  AGENT
  CUSTOMER
  SYSTEM
}

// Keep existing models unchanged
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  link      String?  // Optional: link to related resource
  type      String?  // Optional: type of notification (info, warning, etc.)
  read      Boolean  @default(false)
  hidden    Boolean  @default(false) // User has hidden this notification
  createdAt DateTime @default(now())

  @@map("notifications")
}

model Document {
  id            String   @id @default(cuid())
  fileName      String
  filePath      String // local path or S3 key
  fileType      String // e.g. pdf, docx, dwg
  size          Int
  version       Int      @default(1)
  metadata      Json     // type, project, part, etc.
  annotations   Json?    // Store Fabric.js canvas data
  ownerId       String
  owner         User     @relation("UserDocuments", fields: [ownerId], references: [id])
  department    String?
  accessRoles   String[] // roles allowed to view/edit
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Versioning
  parentId      String?  // for version history (null for latest)
  parent        Document? @relation("DocumentVersion", fields: [parentId], references: [id])
  versions      Document[] @relation("DocumentVersion")
  // Workflow hooks (future)
  workflowState String?  // e.g. draft, review, approved
  workflowMeta  Json?
  projectId     String?
  project       Project? @relation(fields: [projectId], references: [id])

  @@map("documents")
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

model Project {
  id            String   @id @default(cuid())
  name          String
  description   String?
  status        ProjectStatus @default(PLANNING)
  startDate     DateTime @default(now())
  endDate       DateTime?
  budget        Float?
  ownerId       String
  owner         User     @relation(fields: [ownerId], references: [id])
  departments   String[]
  
  // Document template fields
  documentTemplate String? // LLNV, ECO, INSP, etc.
  documentNumber   String? // Auto-generated (e.g., TIPA-LLNV-250727-001)
  
  // Due dates and approval
  requestDate       DateTime? // Request date for the project
  departmentDueDates Json?    // JSON object for department-specific due dates
  approvalState     Json?     // JSON object for department approval states
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  tasks         Task[]
  documents     Document[]
  members       ProjectMember[]
  comments      ProjectComment[]
  notes         Note[] // Notes related to this project

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  role      String   @default("member") // owner, member, viewer
  joinedAt  DateTime @default(now())

  @@unique([projectId, userId])
  @@map("project_members")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  author    User     @relation("CommentAuthor", fields: [authorId], references: [id])
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Task {
  id              String       @id @default(cuid())
  title           String
  description     String?
  status          TaskStatus   @default(TODO)
  priority        TaskPriority @default(MEDIUM)
  
  // Project and assignment
  projectId       String?
  project         Project?     @relation(fields: [projectId], references: [id])
  assigneeId      String?
  assignee        User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  ownerId         String?
  owner           User?        @relation("TaskOwner", fields: [ownerId], references: [id])
  creatorId       String?
  creator         User?        @relation("TaskCreator", fields: [creatorId], references: [id])
  
  // Ticket integration
  sourceTicketId  String?      // tracks origin ticket
  ticketIntegration Json?       // stores TaskFromTicket data
  
  // Dates
  dueDate         DateTime?
  startDate       DateTime?
  completedAt     DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  dependencies    TaskDependency[] @relation("DependentTask")
  dependents      TaskDependency[] @relation("DependencyTask")
  attachments     TaskAttachment[]
  comments        TaskComment[]
  legacyComments  Comment[] // Legacy comments relation
  subtasks        Task[]        @relation("SubtaskParent")
  parentTaskId    String?
  parentTask      Task?         @relation("SubtaskParent", fields: [parentTaskId], references: [id])

  @@map("tasks")
}

model TaskDependency {
  id              String @id @default(cuid())
  dependentTaskId String
  dependentTask   Task   @relation("DependentTask", fields: [dependentTaskId], references: [id])
  dependencyTaskId String
  dependencyTask  Task   @relation("DependencyTask", fields: [dependencyTaskId], references: [id])
  createdAt       DateTime @default(now())

  @@unique([dependentTaskId, dependencyTaskId])
  @@map("task_dependencies")
}

model TaskAttachment {
  id          String   @id @default(cuid())
  fileName    String
  filePath    String
  fileType    String
  fileSize    Int
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedById String
  uploadedBy  User     @relation("TaskAttachmentUploader", fields: [uploadedById], references: [id])
  createdAt   DateTime @default(now())

  @@map("task_attachments")
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  author    User     @relation("TaskCommentAuthor", fields: [authorId], references: [id])
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("task_comments")
}

model ProjectComment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  author    User     @relation("ProjectCommentAuthor", fields: [authorId], references: [id])
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("project_comments")
}
