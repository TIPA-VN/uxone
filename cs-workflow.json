{
  "workflow_1_customer_service": {
    "name": "Customer Service Agent",
    "description": "Main workflow for handling customer service inquiries",
    "workflow": {
      "name": "Customer Service Agent",
      "nodes": [
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "customer-inquiry",
            "responseMode": "responseNode",
            "options": {
              "noResponseBody": false
            }
          },
          "id": "webhook-trigger",
          "name": "Customer Inquiry Webhook",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [240, 300],
          "webhookId": "customer-inquiry-webhook"
        },
        {
          "parameters": {
            "jsCode": "// Extract and validate incoming data\nconst body = $input.first().json.body;\n\n// Extract core information\nconst question = body.question || body.message || '';\nconst customer_id = body.customer_id || body.customer_number || null;\nconst order_number = body.order_number || body.order_id || null;\nconst source = body.source || 'unknown';\nconst priority = body.priority || 'normal';\n\n// Extract metadata\nconst metadata = {\n  timestamp: new Date().toISOString(),\n  source: source,\n  channel: body.channel || 'api',\n  session_id: body.session_id || null,\n  user_agent: body.user_agent || null\n};\n\n// Build context\nconst context = {\n  source: source,\n  priority: priority,\n  metadata: metadata,\n  ...body.context\n};\n\n// Validate required fields\nif (!question || question.trim() === '') {\n  throw new Error('Question is required');\n}\n\n// Return formatted data\nreturn {\n  question: question.trim(),\n  customer_id: customer_id,\n  order_number: order_number,\n  context: context,\n  priority: priority,\n  source: source\n};"
          },
          "id": "extract-data",
          "name": "Extract & Validate Data",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [460, 300]
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": false,
                "leftValue": "",
                "typeValidation": "loose"
              },
              "conditions": [
                {
                  "id": "priority-check",
                  "leftValue": "={{ $json.priority }}",
                  "rightValue": "urgent",
                  "operator": {
                    "type": "string",
                    "operation": "equals"
                  }
                }
              ],
              "combinator": "or"
            }
          },
          "id": "check-priority",
          "name": "Check Priority",
          "type": "n8n-nodes-base.if",
          "typeVersion": 2,
          "position": [680, 300]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "http://localhost:4040/agent/query",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                },
                {
                  "name": "X-Source",
                  "value": "n8n-workflow"
                }
              ]
            },
            "sendBody": true,
            "contentType": "json",
            "body": "={{ $json }}",
            "options": {
              "timeout": 30000,
              "retry": {
                "enabled": true,
                "maxTries": 3
              }
            }
          },
          "id": "call-ai-agent",
          "name": "Call AI Agent",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [900, 200]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "http://localhost:4040/escalations/urgent",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "contentType": "json",
            "body": "={\n  \"type\": \"urgent_inquiry\",\n  \"customer_id\": {{ $json.customer_id }},\n  \"question\": \"{{ $json.question }}\",\n  \"priority\": \"{{ $json.priority }}\",\n  \"timestamp\": \"{{ $json.context.metadata.timestamp }}\"\n}",
            "options": {}
          },
          "id": "urgent-escalation",
          "name": "Urgent Escalation",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [900, 400]
        },
        {
          "parameters": {
            "jsCode": "// Process AI agent response\nconst agentResponse = $input.first().json;\nconst originalData = $('Extract & Validate Data').first().json;\n\n// Extract response details\nconst answer = agentResponse.answer || 'No response generated';\nconst confidence = agentResponse.confidence || 0;\nconst suggestions = agentResponse.suggestions || [];\nconst dataSources = agentResponse.data_sources || [];\n\n// Determine response quality\nlet responseQuality = 'good';\nif (confidence < 0.6) {\n  responseQuality = 'poor';\n} else if (confidence < 0.8) {\n  responseQuality = 'fair';\n}\n\n// Check if human escalation is needed\nconst requiresHuman = confidence < 0.7 || \n                     answer.toLowerCase().includes('error') ||\n                     answer.toLowerCase().includes('sorry') ||\n                     originalData.priority === 'urgent';\n\n// Format final response\nconst formattedResponse = {\n  status: 'success',\n  answer: answer,\n  confidence: Math.round(confidence * 100),\n  confidence_level: responseQuality,\n  suggestions: suggestions,\n  data_sources: dataSources.join(', '),\n  requires_human: requiresHuman,\n  processing_time: new Date().toISOString(),\n  source: originalData.source,\n  \n  // Metadata for analytics\n  metadata: {\n    original_question: originalData.question,\n    customer_id: originalData.customer_id,\n    order_number: originalData.order_number,\n    response_quality: responseQuality,\n    workflow_version: '1.0'\n  }\n};\n\n// Add formatted text for easy consumption\nlet responseText = `**Answer:** ${answer}\\n\\n`;\nif (confidence > 0) {\n  responseText += `**Confidence:** ${Math.round(confidence * 100)}%\\n`;\n}\nif (suggestions.length > 0) {\n  responseText += `\\n**Follow-up Options:**\\n${suggestions.map(s => `• ${s}`).join('\\n')}`;\n}\nif (requiresHuman) {\n  responseText += `\\n\\n*This query has been flagged for human review.*`;\n}\n\nformattedResponse.formatted_text = responseText;\n\nreturn formattedResponse;"
          },
          "id": "format-response",
          "name": "Format Response",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [1120, 200]
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict"
              },
              "conditions": [
                {
                  "id": "human-needed",
                  "leftValue": "={{ $json.requires_human }}",
                  "rightValue": true,
                  "operator": {
                    "type": "boolean",
                    "operation": "equal"
                  }
                }
              ],
              "combinator": "and"
            }
          },
          "id": "check-escalation",
          "name": "Needs Human?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 2,
          "position": [1340, 200]
        },
        {
          "parameters": {
            "respondWith": "json",
            "responseBody": "={{ $json }}"
          },
          "id": "webhook-response",
          "name": "Send Response",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [1560, 120]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "contentType": "json",
            "body": "={\n  \"text\": \"🚨 Customer Service Escalation\",\n  \"blocks\": [\n    {\n      \"type\": \"header\",\n      \"text\": {\n        \"type\": \"plain_text\",\n        \"text\": \"Customer Inquiry Needs Human Attention\"\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"fields\": [\n        {\n          \"type\": \"mrkdwn\",\n          \"text\": \"*Customer:* {{ $json.metadata.customer_id || 'Unknown' }}\"\n        },\n        {\n          \"type\": \"mrkdwn\",\n          \"text\": \"*Order:* {{ $json.metadata.order_number || 'N/A' }}\"\n        },\n        {\n          \"type\": \"mrkdwn\",\n          \"text\": \"*Confidence:* {{ $json.confidence }}%\"\n        },\n        {\n          \"type\": \"mrkdwn\",\n          \"text\": \"*Source:* {{ $json.source }}\"\n        }\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*Question:* {{ $json.metadata.original_question }}\"\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*AI Response:* {{ $json.answer }}\"\n      }\n    },\n    {\n      \"type\": \"actions\",\n      \"elements\": [\n        {\n          \"type\": \"button\",\n          \"text\": {\n            \"type\": \"plain_text\",\n            \"text\": \"Take Case\"\n          },\n          \"style\": \"primary\",\n          \"url\": \"https://your-crm.com/cases/new\"\n        },\n        {\n          \"type\": \"button\",\n          \"text\": {\n            \"type\": \"plain_text\",\n            \"text\": \"View Customer\"\n          },\n          \"url\": \"https://your-crm.com/customers/{{ $json.metadata.customer_id }}\"\n        }\n      ]\n    }\n  ]\n}",
            "options": {}
          },
          "id": "escalate-to-human",
          "name": "Escalate to Human",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [1560, 280]
        },
        {
          "parameters": {
            "respondWith": "json",
            "responseBody": "={\n  \"status\": \"escalated\",\n  \"message\": \"Your inquiry has been escalated to our customer service team. You will receive a response within 30 minutes.\",\n  \"escalation_id\": \"ESC_{{ new Date().getTime() }}\",\n  \"estimated_response_time\": \"30 minutes\"\n}"
          },
          "id": "escalation-response",
          "name": "Escalation Response",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [1780, 280]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "http://localhost:4040/analytics/log-interaction",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "contentType": "json",
            "body": "={{ $json.metadata }}",
            "options": {}
          },
          "id": "log-analytics",
          "name": "Log Analytics",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [1780, 120]
        }
      ],
      "connections": {
        "Customer Inquiry Webhook": {
          "main": [
            [
              {
                "node": "Extract & Validate Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract & Validate Data": {
          "main": [
            [
              {
                "node": "Check Priority",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check Priority": {
          "main": [
            [
              {
                "node": "Call AI Agent",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Urgent Escalation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Call AI Agent": {
          "main": [
            [
              {
                "node": "Format Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Response": {
          "main": [
            [
              {
                "node": "Needs Human?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Needs Human?": {
          "main": [
            [
              {
                "node": "Send Response",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Escalate to Human",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Response": {
          "main": [
            [
              {
                "node": "Log Analytics",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Escalate to Human": {
          "main": [
            [
              {
                "node": "Escalation Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      }
    }
  },
  
  "workflow_2_daily_tasks": {
    "name": "Daily Sales Tasks",
    "description": "Automated daily reporting and monitoring",
    "workflow": {
      "name": "Daily Sales Tasks",
      "nodes": [
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "cronExpression",
                  "expression": "0 8 * * 1-5"
                }
              ]
            }
          },
          "id": "daily-trigger",
          "name": "Daily Morning Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [240, 300]
        },
        {
          "parameters": {
            "method": "GET",
            "url": "http://localhost:4040/agent/daily-summary",
            "options": {
              "timeout": 30000
            }
          },
          "id": "get-daily-summary",
          "name": "Get Daily Summary",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [460, 200]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "http://localhost:4040/agent/query",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "contentType": "json",
            "body": "={\n  \"question\": \"What orders are behind schedule or need attention today?\",\n  \"context\": {\n    \"task_type\": \"daily_review\",\n    \"priority\": \"high\",\n    \"automated\": true\n  }\n}",
            "options": {}
          },
          "id": "check-urgent-orders",
          "name": "Check Urgent Orders",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [460, 400]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "http://localhost:4040/agent/query",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "contentType": "json",
            "body": "={\n  \"question\": \"What customers have not placed orders in the last 30 days?\",\n  \"context\": {\n    \"task_type\": \"customer_retention\",\n    \"automated\": true\n  }\n}",
            "options": {}
          },
          "id": "check-inactive-customers",
          "name": "Check Inactive Customers",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [460, 600]
        },
        {
          "parameters": {
            "jsCode": "// Combine all daily data into comprehensive report\nconst summaryData = $('Get Daily Summary').first().json;\nconst urgentData = $('Check Urgent Orders').first().json;\nconst customerData = $('Check Inactive Customers').first().json;\n\n// Get current date info\nconst today = new Date();\nconst dateString = today.toISOString().split('T')[0];\nconst dayName = today.toLocaleDateString('en-US', { weekday: 'long' });\n\n// Create comprehensive daily report\nconst report = {\n  date: dateString,\n  day: dayName,\n  summary: summaryData.summary_text || 'No summary available',\n  metrics: summaryData.metrics || {},\n  urgent_items: urgentData.answer || 'No urgent items identified',\n  customer_retention: customerData.answer || 'Customer retention data not available',\n  confidence_scores: {\n    summary: summaryData.confidence || 0,\n    urgent: urgentData.confidence || 0,\n    customers: customerData.confidence || 0\n  },\n  \n  // Generate action items based on data\n  action_items: [],\n  \n  // Create formatted report for different channels\n  reports: {}\n};\n\n// Generate action items\nif (summaryData.metrics && summaryData.metrics.today_orders === 0) {\n  report.action_items.push('⚠️ Investigate: No orders placed today');\n}\n\nif (urgentData.confidence > 0.8 && urgentData.answer.toLowerCase().includes('behind')) {\n  report.action_items.push('🚨 Priority: Review behind-schedule orders');\n}\n\nif (customerData.confidence > 0.8 && customerData.answer.toLowerCase().includes('inactive')) {\n  report.action_items.push('📞 Follow-up: Contact inactive customers');\n}\n\nif (report.action_items.length === 0) {\n  report.action_items.push('✅ All systems running smoothly');\n}\n\n// Create Slack report format\nreport.reports.slack = {\n  text: `📊 Daily Sales Report - ${dayName}, ${dateString}`,\n  blocks: [\n    {\n      type: \"header\",\n      text: {\n        type: \"plain_text\",\n        text: `📊 Daily Sales Report - ${dayName}, ${dateString}`\n      }\n    },\n    {\n      type: \"section\",\n      fields: [\n        {\n          type: \"mrkdwn\",\n          text: `*Today's Orders:* ${report.metrics.today_orders || 0}`\n        },\n        {\n          type: \"mrkdwn\",\n          text: `*Week's Orders:* ${report.metrics.week_orders || 0}`\n        },\n        {\n          type: \"mrkdwn\",\n          text: `*Today's Revenue:* ${(report.metrics.today_revenue || 0).toFixed(2)}`\n        },\n        {\n          type: \"mrkdwn\",\n          text: `*Week's Revenue:* ${(report.metrics.week_revenue || 0).toFixed(2)}`\n        }\n      ]\n    },\n    {\n      type: \"section\",\n      text: {\n        type: \"mrkdwn\",\n        text: `*Summary:*\\n${report.summary}`\n      }\n    },\n    {\n      type: \"section\",\n      text: {\n        type: \"mrkdwn\",\n        text: `*Action Items:*\\n${report.action_items.map(item => `• ${item}`).join('\\n')}`\n      }\n    }\n  ]\n};\n\n// Create email report format\nreport.reports.email = {\n  subject: `Daily Sales Report - ${dateString}`,\n  html: `\n    <h2>📊 Daily Sales Report - ${dayName}, ${dateString}</h2>\n    \n    <h3>📈 Key Metrics</h3>\n    <ul>\n      <li><strong>Today's Orders:</strong> ${report.metrics.today_orders || 0}</li>\n      <li><strong>Week's Orders:</strong> ${report.metrics.week_orders || 0}</li>\n      <li><strong>Today's Revenue:</strong> ${(report.metrics.today_revenue || 0).toFixed(2)}</li>\n      <li><strong>Week's Revenue:</strong> ${(report.metrics.week_revenue || 0).toFixed(2)}</li>\n    </ul>\n    \n    <h3>📝 Summary</h3>\n    <p>${report.summary}</p>\n    \n    <h3>🎯 Action Items</h3>\n    <ul>\n      ${report.action_items.map(item => `<li>${item}</li>`).join('')}\n    </ul>\n    \n    <h3>🚨 Urgent Items</h3>\n    <p>${report.urgent_items}</p>\n    \n    <h3>👥 Customer Insights</h3>\n    <p>${report.customer_retention}</p>\n    \n    <hr>\n    <small>Generated automatically by Sales Order AI Agent at ${new Date().toISOString()}</small>\n  `\n};\n\n// Create simple text format\nreport.reports.text = `\nDAILY SALES REPORT - ${dayName}, ${dateString}\n${'='.repeat(50)}\n\nKEY METRICS:\n- Today's Orders: ${report.metrics.today_orders || 0}\n- Week's Orders: ${report.metrics.week_orders || 0}\n- Today's Revenue: ${(report.metrics.today_revenue || 0).toFixed(2)}\n- Week's Revenue: ${(report.metrics.week_revenue || 0).toFixed(2)}\n\nSUMMARY:\n${report.summary}\n\nACTION ITEMS:\n${report.action_items.map(item => `• ${item}`).join('\\n')}\n\nURGENT ITEMS:\n${report.urgent_items}\n\nCUSTOMER INSIGHTS:\n${report.customer_retention}\n\n${'='.repeat(50)}\nGenerated: ${new Date().toISOString()}\n`;\n\nreturn report;"
          },
          "id": "compile-report",
          "name": "Compile Daily Report",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [680, 400]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "contentType": "json",
            "body": "={{ $json.reports.slack }}",
            "options": {}
          },
          "id": "send-slack-report",
          "name": "Send to Slack",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [900, 280]
        },
        {
          "parameters": {
            "fromEmail": "noreply@yourcompany.com",
            "toEmail": "management@yourcompany.com",
            "subject": "={{ $json.reports.email.subject }}",
            "emailFormat": "html",
            "html": "={{ $json.reports.email.html }}",
            "options": {}
          },
          "id": "send-email-report",
          "name": "Send Email Report",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 2,
          "position": [900, 400]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "http://localhost:4040/reports/daily",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "contentType": "json",
            "body": "={{ $json }}",
            "options": {}
          },
          "id": "save-report",
          "name": "Save Report to Database",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [900, 520]
        }
      ],
      "connections": {
        "Daily Morning Trigger": {
          "main": [
            [
              {
                "node": "Get Daily Summary",
                "type": "main",
                "index": 0
              },
              {
                "node": "Check Urgent Orders",
                "type": "main",
                "index": 0
              },
              {
                "node": "Check Inactive Customers",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Daily Summary": {
          "main": [
            [
              {
                "node": "Compile Daily Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check Urgent Orders": {
          "main": [
            [
              {
                "node": "Compile Daily Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check Inactive Customers": {
          "main": [
            [
              {
                "node": "Compile Daily Report",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Compile Daily Report": {
          "main": [
            [
              {
                "node": "Send to Slack",
                "type": "main",
                "index": 0
              },
              {
                "node": "Send Email Report",
                "type": "main",
                "index": 0
              },
              {
                "node": "Save Report to Database",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      }
    }
  },
  
  "workflow_3_monitoring": {
    "name": "Continuous Order Monitoring",
    "description": "Monitor for issues and send alerts",
    "workflow": {
      "name": "Order Issue Monitoring",
      "nodes": [
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "cronExpression",
                  "expression": "0 */2 * * *"
                }
              ]
            }
          },
          "id": "monitoring-trigger",
          "name": "Every 2 Hours",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [240, 300]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "http://localhost:4040/agent/query",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "contentType": "json",
            "body": "={\n  \"question\": \"What orders are overdue, stuck, or have critical issues?\",\n  \"context\": {\n    \"task_type\": \"monitoring\",\n    \"urgency\": \"high\",\n    \"automated\": true,\n    \"check_types\": [\"overdue\", \"stuck\", \"shipping_issues\", \"payment_issues\"]\n  }\n}",
            "options": {}
          },
          "id": "check-issues",
          "name": "Check for Issues",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [460, 300]
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": false,
                "leftValue": "",
                "typeValidation": "loose"
              },
              "conditions": [
                {
                  "id": "confidence-check",
                  "leftValue": "={{ $json.confidence }}",
                  "rightValue": 0.7,
                  "operator": {
                    "type": "number",
                    "operation": "gt"
                  }
                },
                {
                  "id": "issue-keywords",
                  "leftValue": "={{ $json.answer }}",
                  "rightValue": "overdue|urgent|critical|stuck|issue|problem|delay",
                  "operator": {
                    "type": "string",
                    "operation": "regex"
                  }
                }
              ],
              "combinator": "and"
            }
          },
          "id": "evaluate-severity",
          "name": "Issues Found?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 2,
          "position": [680, 300]
        },
        {
          "parameters": {
            "jsCode": "// Analyze the issues and categorize by severity\nconst issueData = $input.first().json;\nconst answer = issueData.answer || '';\nconst confidence = issueData.confidence || 0;\n\n// Determine severity based on keywords\nlet severity = 'low';\nif (answer.toLowerCase().includes('critical') || answer.toLowerCase().includes('urgent')) {\n  severity = 'critical';\n} else if (answer.toLowerCase().includes('overdue') || answer.toLowerCase().includes('stuck')) {\n  severity = 'high';\n} else if (answer.toLowerCase().includes('delay') || answer.toLowerCase().includes('issue')) {\n  severity = 'medium';\n}\n\n// Extract any order numbers mentioned\nconst orderMatches = answer.match(/order[s]?\\s*#?(\\d+)/gi) || [];\nconst orderNumbers = orderMatches.map(match => {\n  const num = match.match(/\\d+/);\n  return num ? parseInt(num[0]) : null;\n}).filter(Boolean);\n\n// Create alert data\nconst alertData = {\n  timestamp: new Date().toISOString(),\n  severity: severity,\n  confidence: confidence,\n  issue_description: answer,\n  affected_orders: orderNumbers,\n  alert_id: `ALERT_${Date.now()}`,\n  requires_immediate_action: severity === 'critical',\n  \n  // Format for different notification channels\n  notifications: {\n    slack: {\n      color: severity === 'critical' ? '#ff0000' : severity === 'high' ? '#ff8800' : '#ffaa00',\n      emoji: severity === 'critical' ? '🚨' : severity === 'high' ? '⚠️' : '📋',\n      title: `${severity.toUpperCase()} Order Issues Detected`\n    },\n    email: {\n      priority: severity === 'critical' ? 'High' : 'Normal',\n      subject: `${severity.toUpperCase()}: Order Monitoring Alert`\n    }\n  }\n};\n\nreturn alertData;"
          },
          "id": "analyze-severity",
          "name": "Analyze Issue Severity",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [900, 200]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "contentType": "json",
            "body": "={\n  \"text\": \"{{ $json.notifications.slack.emoji }} {{ $json.notifications.slack.title }}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.notifications.slack.color }}\",\n      \"fields\": [\n        {\n          \"title\": \"Severity\",\n          \"value\": \"{{ $json.severity.toUpperCase() }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Confidence\",\n          \"value\": \"{{ Math.round($json.confidence * 100) }}%\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Affected Orders\",\n          \"value\": \"{{ $json.affected_orders.length > 0 ? $json.affected_orders.join(', ') : 'Multiple/Unknown' }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Alert ID\",\n          \"value\": \"{{ $json.alert_id }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Issue Description\",\n          \"value\": \"{{ $json.issue_description }}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Order Monitoring System\",\n      \"ts\": {{ Math.floor(Date.now() / 1000) }}\n    }\n  ]\n}",
            "options": {}
          },
          "id": "send-slack-alert",
          "name": "Send Slack Alert",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [1120, 100]
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict"
              },
              "conditions": [
                {
                  "id": "critical-check",
                  "leftValue": "={{ $json.severity }}",
                  "rightValue": "critical",
                  "operator": {
                    "type": "string",
                    "operation": "equals"
                  }
                }
              ],
              "combinator": "or"
            }
          },
          "id": "check-critical",
          "name": "Critical Issue?",
          "type": "n8n-nodes-base.if",
          "typeVersion": 2,
          "position": [1120, 200]
        },
        {
          "parameters": {
            "fromEmail": "alerts@yourcompany.com",
            "toEmail": "management@yourcompany.com,operations@yourcompany.com",
            "subject": "🚨 CRITICAL: {{ $json.notifications.email.subject }}",
            "emailFormat": "html",
            "html": "=<h2 style=\"color: #ff0000;\">🚨 CRITICAL ORDER ISSUE DETECTED</h2>\n\n<p><strong>Alert ID:</strong> {{ $json.alert_id }}</p>\n<p><strong>Severity:</strong> {{ $json.severity.toUpperCase() }}</p>\n<p><strong>Confidence:</strong> {{ Math.round($json.confidence * 100) }}%</p>\n<p><strong>Detection Time:</strong> {{ $json.timestamp }}</p>\n\n<h3>Issue Description:</h3>\n<p>{{ $json.issue_description }}</p>\n\n<h3>Affected Orders:</h3>\n<p>{{ $json.affected_orders.length > 0 ? $json.affected_orders.join(', ') : 'Multiple or unknown orders affected' }}</p>\n\n<h3>Immediate Actions Required:</h3>\n<ul>\n<li>Review affected orders immediately</li>\n<li>Contact customers if necessary</li>\n<li>Coordinate with operations team</li>\n<li>Update order status as needed</li>\n</ul>\n\n<p><em>This is an automated alert from the Order Monitoring System.</em></p>",
            "options": {}
          },
          "id": "send-critical-email",
          "name": "Send Critical Email",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 2,
          "position": [1340, 150]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "http://localhost:4040/alerts/log",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "contentType": "json",
            "body": "={{ $json }}",
            "options": {}
          },
          "id": "log-alert",
          "name": "Log Alert",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [1340, 300]
        }
      ],
      "connections": {
        "Every 2 Hours": {
          "main": [
            [
              {
                "node": "Check for Issues",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check for Issues": {
          "main": [
            [
              {
                "node": "Issues Found?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Issues Found?": {
          "main": [
            [
              {
                "node": "Analyze Issue Severity",
                "type": "main",
                "index": 0
              }
            ],
            []
          ]
        },
        "Analyze Issue Severity": {
          "main": [
            [
              {
                "node": "Send Slack Alert",
                "type": "main",
                "index": 0
              },
              {
                "node": "Critical Issue?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Critical Issue?": {
          "main": [
            [
              {
                "node": "Send Critical Email",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Log Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Critical Email": {
          "main": [
            [
              {
                "node": "Log Alert",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      }
    }
  },
  
  "setup_instructions": {
    "description": "How to set up and use these n8n workflows",
    "steps": [
      {
        "step": 1,
        "title": "Install and Start n8n",
        "commands": [
          "npm install n8n -g",
          "n8n start"
        ],
        "access": "http://localhost:5678"
      },
      {
        "step": 2,
        "title": "Import Workflows",
        "actions": [
          "Copy each workflow JSON from above",
          "In n8n interface, click 'Import from JSON'",
          "Paste the workflow JSON",
          "Save the workflow"
        ]
      },
      {
        "step": 3,
        "title": "Configure Webhooks",
        "settings": {
          "customer_service_webhook": "http://localhost:5678/webhook/customer-inquiry",
          "test_url": "curl -X POST http://localhost:5678/webhook/customer-inquiry -H 'Content-Type: application/json' -d '{\"question\": \"What is order 12345 status?\", \"customer_id\": 1001}'"
        }
      },
      {
        "step": 4,
        "title": "Configure Notifications",
        "slack": {
          "setup": "Create Slack app and get webhook URL",
          "replace": "Replace 'YOUR/SLACK/WEBHOOK' with actual URL"
        },
        "email": {
          "setup": "Configure SMTP settings in n8n",
          "credentials": "Add email credentials in n8n settings"
        }
      },
      {
        "step": 5,
        "title": "Configure API Endpoints",
        "api_base": "http://localhost:4040",
        "endpoints_to_verify": [
          "/agent/query",
          "/agent/daily-summary",
          "/reports/daily",
          "/alerts/log"
        ]
      }
    ]
  },
  
  "testing_examples": {
    "customer_service_test": {
      "webhook_url": "http://localhost:5678/webhook/customer-inquiry",
      "test_payload": {
        "question": "What is the status of my order #12345?",
        "customer_id": 1001,
        "source": "web_chat",
        "priority": "normal",
        "context": {
          "channel": "website",
          "session_id": "sess_123456"
        }
      },
      "expected_response": {
        "status": "success",
        "answer": "Order 12345 details...",
        "confidence": 85,
        "suggestions": ["Would you like tracking info?"]
      }
    },
    "urgent_escalation_test": {
      "webhook_url": "http://localhost:5678/webhook/customer-inquiry",
      "test_payload": {
        "question": "This is urgent! My order is missing and I need it today!",
        "customer_id": 1002,
        "priority": "urgent",
        "source": "phone"
      },
      "expected_behavior": "Should trigger escalation workflow and Slack notification"
    }
  }
}